{
    "contents" : "\n## install required package if it doesn't exists \nif (!require(\"data.table\")) {\n  install.packages(\"data.table\")\n}\n\n\n## Download data if data doesn't exists:\nDataFileName <- \"getdata-projectfiles-UCI HAR Dataset.zip\"\n\nif (!file.exists(DataFileName)){\n  fileURL <- \"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip\"\n  download.file(fileURL, DataFileName)\n}  \n\n\n## Unzip data if data folder doesn't exists:\nif (!file.exists(\"UCI HAR Dataset\")) { \n  unzip(DataFileName) \n}\n\n## Load activity labels from \"activity_labels.txt\"\nActivityLabels = read.csv(\"UCI HAR Dataset/activity_labels.txt\", sep=\"\", header=FALSE)\n\n## Read features labels from \"features.txt\"\nFeaturesLabels = read.csv(\"UCI HAR Dataset/features.txt\", sep=\"\", header=FALSE)\n\n## Appropriately labels the data set with descriptive variable names\nFeaturesLabels[,2] = gsub(\"-mean\", \"Mean\", FeaturesLabels[,2])\nFeaturesLabels[,2] = gsub(\"-std\", \"STD\", FeaturesLabels[,2])\nFeaturesLabels[,2] = gsub(\"[()]\", \"\", FeaturesLabels[,2])\n\n## Load test data.\nDF_subject_test <- read.table(\"./UCI HAR Dataset/test/subject_test.txt\")\nDF_y_test <- read.table(\"./UCI HAR Dataset/test/y_test.txt\")\nDF_X_test <- read.table(\"./UCI HAR Dataset/test/X_test.txt\")\n\n## create a new column at y_test to represent activity label\nDF_y_test[,2] = ActivityLabels$V2[match(DF_y_test$V1,ActivityLabels$V1)]\n\n## Uses descriptive activity names to name the activities in the test data set\nnames(DF_subject_test) = \"Subject\"\nnames(DF_y_test) = c(\"Activity_ID\",\"Activity_Label\")\nnames(DF_X_test) = FeaturesLabels[,2]\n\n\n## pick only the the mean and standard deviation from each measurement of X_Test\nrequired_features <- grepl(\"Mean|STD\", FeaturesLabels[,2])\nDF_X_test = DF_X_test[,required_features]\n\n## combine all test data into one data frame\nDF_CombinedTestData <- cbind(DF_subject_test, DF_y_test, DF_X_test)\n\n\n## Load train data.\nDF_subject_train <- read.table(\"./UCI HAR Dataset/train/subject_train.txt\")\nDF_y_train <- read.table(\"./UCI HAR Dataset/train/y_train.txt\")\nDF_X_train <- read.table(\"./UCI HAR Dataset/train/X_train.txt\")\n\n## create a new column at y_test to represent activity label\nDF_y_train[,2] = ActivityLabels$V2[match(DF_y_train$V1,ActivityLabels$V1)]\n\n## Uses descriptive activity names to name the activities in the train data set\nnames(DF_subject_train) = \"Subject\"\nnames(DF_y_train) = c(\"Activity_ID\",\"Activity_Label\")\nnames(DF_X_train) = FeaturesLabels[,2]\n\n\n## pick only the the mean and standard deviation from each measurement of X_trian\nDF_X_train = DF_X_train[,required_features]\n\n## combine all train data into one data frame\nDF_CombinedTrainData <- cbind(DF_subject_train, DF_y_train, DF_X_train)\n\n## remove temporary elements\nrm(DF_subject_test,DF_y_test,DF_X_test,DF_subject_train,DF_y_train,DF_X_train,ActivityLabels,FeaturesLabels,required_features,DataFileName)\n\n# Merge test and train data\nDF_CombinedData = rbind(DF_CombinedTestData, DF_CombinedTrainData)\n\n## remove temporary elements\nrm(DF_CombinedTestData, DF_CombinedTrainData)\n\n## creates a independent tidy data set with the average of each variable for each activity and each subject\nID_labels   = c(\"Subject\", \"Activity_ID\", \"Activity_Label\")\nData_labels = setdiff(colnames(DF_CombinedData), ID_labels)\nmelt_data = melt(DF_CombinedData, id = ID_labels, measure.vars = Data_labels)\ntidy_data = dcast(melt_data, Subject + Activity_Label ~ variable, mean)\n\n## output tidy data to a text file\nwrite.table(tidy_data, file = \"tidy.txt\",row.names = FALSE, quote = FALSE)\n",
    "created" : 1450821387437.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4274105195",
    "id" : "3C96AB43",
    "lastKnownWriteTime" : 1450838189,
    "path" : "~/GitHub/Getting-and-Cleaning-Data-Course-Project/run_analysis.R",
    "project_path" : "run_analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}